@inject HabitTrackerService habitTrackerservice
@inject AuthenticationStateProvider AuthenticationStateProvider
@if (isLoaded)
{
<CascadingValue Value="UserActivitiesKanbanShowing" Name="KanbanUserActivities">
    <CascadingValue Value="UserActivities" Name="UserActivities">
       <CascadingValue Value="Userhabits" Name="Userhabits">
        @ChildContent
    </CascadingValue>
    </CascadingValue>
</CascadingValue>

}
else
{
    <Icon Type="loading" Theme="outline" />
}

@code {
    bool isLoaded;
    public List<HabitOccasion> UserActivities = new List<HabitOccasion>();
    public List<HabitOccasion> UserActivitiesKanbanShowing; 
    public List<Habit> Userhabits;


    [Parameter]
    public RenderFragment ChildContent { get; set; }

    protected override async Task OnInitializedAsync() //HabitId Title  Description RepeatValue RequiredTomatoes fkUserName OccasionId ScheduledDate Status 
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var username = authState.User.Identity.Name;
        UserActivities =  habitTrackerservice.GetAllTodaysUserHabits(username);
        UserActivitiesKanbanShowing = new List<HabitOccasion>(UserActivities);
        UserActivitiesKanbanShowing.Add(new HabitOccasion() { HabitId = 0, Status = ActivityStatus.Todo, Description = UserActivities.Where(i => i.Status == ActivityStatus.Todo).Count() + "/" + UserActivities.Count() });
        UserActivitiesKanbanShowing.Add(new HabitOccasion() { HabitId = 0, Status = ActivityStatus.Doing, Description = UserActivities.Where(i => i.Status == ActivityStatus.Doing).Count() + "/" + UserActivities.Count() });
        UserActivitiesKanbanShowing.Add(new HabitOccasion() { HabitId = 0, Status = ActivityStatus.Done, Description = UserActivities.Where(i => i.Status == ActivityStatus.Done).Count() + "/" + UserActivities.Count() });
        Userhabits = await habitTrackerservice.GetAllUserHabits(username);
        isLoaded = true;
    }
}