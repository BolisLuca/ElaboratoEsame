@page "/"
@using Microsoft.AspNetCore.Components.Authorization
@using System.Timers;

@inject HabitTrackerService habitTrackerservice
@inject AuthenticationStateProvider AuthenticationStateProvider

@inject ModalService _modalService
@inject MessageService _message
@inject NotificationService _notice



<Row>
    <Col Span="18">
    <div style="background-color: #ececec; padding: 20px;">
        <Row Gutter="16">

            <Col Span="8">
            <Title Level="3">
                To Do <Button Type="primary" OnClick="@(() => { _ModalVisible = true; })">
                    <Icon Type="plus" Theme="outline" />
                </Button>
                <Modal Title="@title"
                       Visible="@_ModalVisible"
                       OnOk="@HandleOk"
                       OnCancel="@HandleCancel">


                    <Form Model="@activity"
                          LabelColSpan="8"
                          WrapperColSpan="16"
                          Size="@AntSizeLDSType.Default">

                        <FormItem Label="Title">
                            <Input @bind-Value="@context.Title" />
                        </FormItem>
                        <FormItem Label="Description">
                            <TextArea @bind-Value="@context.Description" />
                        </FormItem>

                        <FormItem Label="Date">
                            <DatePicker @bind-Value="@context.Data" DefaultValue="DateTime.Today" DefaultPickerValue="DateTime.Today" />
                        </FormItem>
                        <FormItem Label="Tomatoes">
                            <Rate Character="@TomatoCharacter" DefaultValue="3" />
                        </FormItem>


                    </Form>


                </Modal>
            </Title>
            <Dropzone Items="UserActivitiesKanbanShowing.Where(i => i.Status == Models.ActivityStatus.Todo).ToList()" Accepts='(d, t) =>  d.Pkid != 0' TItem="Activity" OnItemDrop="@(async (item) => { item.Status = ActivityStatus.Todo; await habitTrackerservice.UpdateActivityAsync(item); await UpdateColoumnFooter(); })">

                @if (context.Pkid != 0)
                {
                    <Card Bordered="true" Title=@context.Title Actions="@(new[] {
                actionEdit(()=> OnClick(context)),  actionDelete(()=> OnClickDelete(context))})">
                        <Body>
                            <p>@context.Description</p>
                        </Body>
                    </Card>
                }
                else
                {
                    <Card Bordered="true" Title=@context.Title>
                        <Body>
                            <p>@context.Description</p>
                        </Body>
                    </Card>
                }


            </Dropzone>
            </Col>
            <Col Span="8">
            <Title Level="3">Doing</Title>
            <Dropzone Items="UserActivitiesKanbanShowing.Where(i => i.Status == Models.ActivityStatus.Doing).ToList()" Accepts='(d, t) =>  d.Pkid != 0' TItem="Activity" OnItemDrop="@(async (item) => { item.Status = ActivityStatus.Doing; await habitTrackerservice.UpdateActivityAsync(item); await UpdateColoumnFooter();} )">

                @if (context.Pkid != 0)
                {
                    <Card Bordered="true" Title=@context.Title Actions="@(new[] {
                actionEdit(()=> OnClick(context)), actionDelete(()=> OnClickDelete(context))})">
                        <Body>
                            <p>@context.Description</p>
                        </Body>
                    </Card>
                }
                else
                {
                    <Card Bordered="true" Title=@context.Title>
                        <Body>
                            <p>@context.Description</p>
                        </Body>
                    </Card>
                }



            </Dropzone>
            </Col>
            <Col Span="8">
            <Title Level="3">Done</Title>
            <Dropzone Items="UserActivitiesKanbanShowing.Where(i => i.Status == Models.ActivityStatus.Done).ToList()" Accepts='(d, t) => d.Pkid != 0' TItem="Activity" OnItemDrop="@(async (item) => { item.Status = ActivityStatus.Done; await habitTrackerservice.UpdateActivityAsync(item);  await UpdateColoumnFooter();})">


                @if (context.Pkid != 0)
                {
                    <Card Bordered="true" Title=@context.Title Actions="@(new[] {
                actionEdit(()=> OnClick(context)),  actionDelete(()=> OnClickDelete(context))})">
                        <Body>
                            <p>@context.Description</p>
                        </Body>
                    </Card>
                }
                else
                {
                    <Card Bordered="true" Title=@context.Title>
                        <Body>
                            <p>@context.Description</p>
                        </Body>
                    </Card>
                }


            </Dropzone>
            </Col>
        </Row>

    </div>
    </Col>
    <Col Span="6">
    <div class="site-calendar-demo-card">
        <Calendar DefaultValue="DateTime.Today" FullScreen="@false" />
    </div>
    </Col>
</Row>

@if (UserActivities.Count() == 0)
{
    <Progress Percent="0" Status="@ProgressStatus.Active" />

}
else
{
    <Progress StrokeColor=_gradients Percent="(Math.Floor(((double)UserActivities.Where(i => i.Status == ActivityStatus.Done).Count() / (double)UserActivities.Count() * 100)))  " Status="@ProgressStatus.Active" />

}





@code{
    string username;
    [CascadingParameter(Name = "KanbanUserActivities")] List<Activity> UserActivitiesKanbanShowing { get; set; }
    [CascadingParameter(Name = "UserActivities")] List<Activity> UserActivities { get; set; }

    bool dataisloaded = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        username = authState.User.Identity.Name;
    }

    private async Task UpdateUserActivities()
    {
        UserActivities = await habitTrackerservice.GetAllTodaysUserActivities(username);
        UserActivitiesKanbanShowing = new List<Activity>(UserActivities);
        UserActivitiesKanbanShowing.Add(new Activity() { Pkid = 0, Status = ActivityStatus.Todo, Description = UserActivities.Where(i => i.Status == ActivityStatus.Todo).Count() + "/" + UserActivities.Count() });
        UserActivitiesKanbanShowing.Add(new Activity() { Pkid = 0, Status = ActivityStatus.Doing, Description = UserActivities.Where(i => i.Status == ActivityStatus.Doing).Count() + "/" + UserActivities.Count() });
        UserActivitiesKanbanShowing.Add(new Activity() { Pkid = 0, Status = ActivityStatus.Done, Description = UserActivities.Where(i => i.Status == ActivityStatus.Done).Count() + "/" + UserActivities.Count() });
    }

    private async Task UpdateColoumnFooter()
    {
        UserActivitiesKanbanShowing.Where(i => i.Pkid == 0 && i.Status == ActivityStatus.Todo).FirstOrDefault().Description = UserActivities.Where(i => i.Status == ActivityStatus.Todo).Count() + "/" + UserActivities.Count();
        UserActivitiesKanbanShowing.Where(i => i.Pkid == 0 && i.Status == ActivityStatus.Doing).FirstOrDefault().Description = UserActivities.Where(i => i.Status == ActivityStatus.Doing).Count() + "/" + UserActivities.Count();
        UserActivitiesKanbanShowing.Where(i => i.Pkid == 0 && i.Status == ActivityStatus.Done).FirstOrDefault().Description = UserActivities.Where(i => i.Status == ActivityStatus.Done).Count() + "/" + UserActivities.Count();

    }

    string title = "New Activity";
    bool _ModalVisible = false;

    private async Task HandleOk(MouseEventArgs e)
    {
        if (_edit)
        {
            await habitTrackerservice.UpdateActivityAsync(activity);
            await UpdateUserActivities();
            activity = new Activity();
        }
        else
        {

            activity.Status = ActivityStatus.Todo;
            activity.fkUsernName = username;
            await habitTrackerservice.AddActivityAsync(activity);
            await UpdateUserActivities();
            activity = new Activity();
        }
        _ModalVisible = false;
        _edit = false;
    }

    private void HandleCancel(MouseEventArgs e)
    {
        _ModalVisible = false;

    }

    private Activity activity = new Activity();



    RenderFragment<RateItemRenderContext> TomatoCharacter = (builder) =>
    @<Template>
        O
    </Template>;

RenderFragment actionEdit(Action clickAction) =>@<Icon Type="edit" OnClick="@clickAction" />;
RenderFragment actionDelete(Action clickAction) =>@<Icon Type="delete" OnClick="@clickAction" />;

    void OnClick(Activity SelectedActivity)
    {
        activity = SelectedActivity;
        _ModalVisible = true;
        _edit = true;
    }


    bool _edit = false;

    private void OnClickDelete(Activity SelectedAtivity)
    {
        activity = SelectedAtivity;
        ShowDeleteConfirm();

    }


    Func<ModalClosingEventArgs, Task> onOk = (e) =>
    {
        return Task.CompletedTask;
    };
    Func<ModalClosingEventArgs, Task> onCancel = (e) =>
    {
        return Task.CompletedTask;
    };
    RenderFragment icon = @<Icon Type="exclamation-circle" Theme="outline"></Icon>;
private void ShowDeleteConfirm()
{
_modalService.Confirm(new ConfirmOptions()
{
Title = "Are you sure delete this task?",
Icon = icon,
Content = "Some descriptions",
OnOk = onOk,
OnCancel = onCancel,
OkType = "danger",
});
}


//Notification
RenderFragment customIcon = @<Icon Type="smile" Theme="outline" Style="color:#108ee9;"></Icon>;

RenderFragment notificationContent =@<Progress Type=ProgressType.Circle Percent=timer.Interval Size=ProgressSize.Small />;
public static Timer timer;

private async Task HandleNotification()
{
timer = new Timer(1000); //1500000
timer.Start();
//timer. += OnClick();
await _notice.Open(new NotificationConfig()
{
Message = "title",
Description = notificationContent
});
}
private Dictionary<string, string> _gradients = new()
{
            { "0%", "#108ee9" },
            { "100%", "#87d068" }
        };
}
