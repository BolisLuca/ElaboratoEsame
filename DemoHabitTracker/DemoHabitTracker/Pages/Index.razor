@page "/"
@using DemoHabitTracker.Data
@using Microsoft.AspNetCore.Components.Authorization
@using System.Text.Json
@inject HabitTrackerDbContext HabitTrackercontext
@inject AuthenticationStateProvider AuthenticationStateProvider




<Layout Class="site-layout-background" Style="padding: 24px 0;">
    <Content Style="padding:0 24px; min-height: 280px;">
        <div style="background-color: #ececec; padding: 20px;">
            <Row Gutter="16">

                <Col Span="8">
                <Title Level="3">
                    To Do <Button Type="primary" OnClick="@(()=>{ _visible = true; })">
                        <Icon Type="plus" Theme="outline" />
                    </Button>
                    <Modal Title="@title"
                           Visible="@_visible"
                           OnOk="@HandleOk"
                           OnCancel="@HandleCancel">


                        <Form Model="@activity"
                              LabelColSpan="8"
                              WrapperColSpan="16"
                              OnFinish="OnFinish"
                              OnFinishFailed="OnFinishFailed"
                              Size="@AntSizeLDSType.Default">

                            <FormItem Label="Title">
                                <Input @bind-Value="@context.Title" />
                            </FormItem>
                            <FormItem Label="Description">
                                <TextArea @bind-Value="@context.Description" />
                            </FormItem>

                            <FormItem Label="Date">
                                <DatePicker @bind-Value="@context.Data" DefaultPickerValue="DateTime.Today" />
                            </FormItem>
                            <FormItem Label="Tomatoes">
                                <Rate Character="@Character1" DefaultValue="3" />
                            </FormItem>


                        </Form>


                    </Modal>
                </Title>

                <Dropzone Items="UserActivities.Where(i => i.Status == Models.ActivityStatus.Todo).ToList()" Accepts='(d, t)=>!d.Pkid.Contains("no_drag")' TItem="Activity" OnItemDrop="@((item) => { item.Status = ActivityStatus.Todo;  HabitTrackercontext.SaveChanges(); UpdateUserActivities(); })">

                    <Card Bordered="true" Title=@context.Title>
                        <Body>
                            <p>@context.Description</p>
                        </Body>
                    </Card>

                </Dropzone>
                </Col>
                <Col Span="8">
                <Title Level="3">Doing</Title>
                <Dropzone Items="UserActivities.Where(i => i.Status == Models.ActivityStatus.Doing).ToList()" Accepts='(d, t)=>!d.Pkid.Contains("no_drag")' TItem="Activity" OnItemDrop="@((item) => { item.Status = ActivityStatus.Doing; HabitTrackercontext.SaveChanges();UpdateUserActivities();  })">


                    <Card Bordered="true" Title=@context.Title>
                        <Body>
                            <p>@context.Description</p>
                        </Body>
                    </Card>


                </Dropzone>
                </Col>
                <Col Span="8">
                <Title Level="3">Done</Title>
                <Dropzone Items="UserActivities.Where(i => i.Status == Models.ActivityStatus.Done).ToList()" Accepts='(d, t)=>!d.Pkid.Contains("no_drag")' TItem="Activity" OnItemDrop="@((item) => { item.Status = ActivityStatus.Done; HabitTrackercontext.SaveChanges();UpdateUserActivities();  })">


                    <Card Bordered="true" Title=@context.Title>
                        <Body>
                            <p>@context.Description</p>
                        </Body>
                    </Card>


                </Dropzone>
                </Col>
            </Row>

        </div>
    </Content>
    <Sider Class="site-layout-background" Width="200">
        <div class="site-calendar-demo-card">
            <Calendar FullScreen="@false" />
        </div>
    </Sider>
</Layout>
<Progress Percent="(HabitTrackercontext.Activities.Where(i => i.fkUsernName == username).Where(i => i.Status == ActivityStatus.Done).Count()/HabitTrackercontext.Activities.Where(i => i.fkUsernName == username).Count())*100" Status="@ProgressStatus.Active" />
@code{
    string username;
    List<Activity> UserActivities;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        username = authState.User.Identity.Name;
        UpdateUserActivities();
    }

    private void UpdateUserActivities()
    {
        UserActivities = HabitTrackercontext.Activities.Where(i => i.fkUsernName == username).ToList();
        UserActivities.Add(new Activity() { Pkid = "no_drag1", Status = ActivityStatus.Todo, Description = HabitTrackercontext.Activities.Where(i => i.fkUsernName == username).Where(i => i.Status == ActivityStatus.Todo).Count() + "/" + HabitTrackercontext.Activities.Where(i => i.fkUsernName == username).Count() });
        UserActivities.Add(new Activity() { Pkid = "no_drag2", Status = ActivityStatus.Doing, Description = HabitTrackercontext.Activities.Where(i => i.fkUsernName == username).Where(i => i.Status == ActivityStatus.Doing).Count() + "/" + HabitTrackercontext.Activities.Where(i => i.fkUsernName == username).Count() });
        UserActivities.Add(new Activity() { Pkid = "no_drag3", Status = ActivityStatus.Done, Description = HabitTrackercontext.Activities.Where(i => i.fkUsernName == username).Where(i => i.Status == ActivityStatus.Done).Count() + "/" + HabitTrackercontext.Activities.Where(i => i.fkUsernName == username).Count() });
    }
    string title = "New Activity";
    bool _visible = false;

    private async Task HandleOk(MouseEventArgs e)
    {
        Console.WriteLine(e);
        await HabitTrackercontext.Activities.AddAsync(new Activity() { Pkid= username+ HabitTrackercontext.Activities.Where(i => i.fkUsernName == username).Count(), Title= activity.Title, Description= activity.Description, Data= activity.Data, Tomato_richiesti = activity.Tomato_richiesti, Status = ActivityStatus.Todo ,fkUsernName = username });
        await HabitTrackercontext.SaveChangesAsync();
        UpdateUserActivities();
        _visible = false;
    }

    private void HandleCancel(MouseEventArgs e)
    {
        Console.WriteLine(e);
        _visible = false;
    }
    private void UpdateFooter()
    {
        UserActivities.Where(i => i.Pkid == "no_drag1").FirstOrDefault().Description = HabitTrackercontext.Activities.Where(i => i.fkUsernName == username).Where(i => i.Status == ActivityStatus.Todo).Count() + "/" + HabitTrackercontext.Activities.Where(i => i.fkUsernName == username).Count();
        UserActivities.Where(i => i.Pkid == "no_drag2").FirstOrDefault().Description = HabitTrackercontext.Activities.Where(i => i.fkUsernName == username).Where(i => i.Status == ActivityStatus.Doing).Count() + "/" + HabitTrackercontext.Activities.Where(i => i.fkUsernName == username).Count();
        UserActivities.Where(i => i.Pkid == "no_drag3").FirstOrDefault().Description = HabitTrackercontext.Activities.Where(i => i.fkUsernName == username).Where(i => i.Status == ActivityStatus.Done).Count() + "/" + HabitTrackercontext.Activities.Where(i => i.fkUsernName == username).Count();
    }

    private Activity activity = new Activity();


    private List<string> autoCompleteOptions = new List<string> { "Primary", "Junior", "Senior", "Undergraduate", "Master", "Doctor" };

    private void OnFinish(EditContext editContext)
    {

    }

    private void OnFinishFailed(EditContext editContext)
    {

    }

    RenderFragment<RateItemRenderContext> Character1 = (builder) =>
    @<Template>
        O
    </Template>;


}
