@page "/"
@using Microsoft.AspNetCore.Components.Authorization
@using System.Timers;

@inject HabitTrackerService habitTrackerservice
@inject AuthenticationStateProvider AuthenticationStateProvider

@inject ModalService _modalService
@inject MessageService _message
@inject NotificationService _notice



<Row>
    <Col Span="18" Xl="18" Xs="24">
    <div style="background-color: #ececec; padding: 20px;">
        <Row Gutter="16">

            <Col Span="8" Xs="24" Xl="8">
            <Title Level="3">
                To Do <Button Type="primary" OnClick="@(() => {habit = new Habit(); _ModalVisible = true; })">
                    <Icon Type="plus" Theme="outline" />
                </Button>
                <Modal Title="@title"
                       Visible="@_ModalVisible"
                       OnOk="@ModalHandleOk"
                       OnCancel="@ModalHandleCancel">


                    <Form @ref="form"
                          Model="@habit"
                          LabelColSpan="8"
                          WrapperColSpan="16"
                          Size="@AntSizeLDSType.Default"
                          ValidateOnChange=true>

                        <FormItem Label="Title">
                            <Input @bind-Value="@context.Title" DebounceMilliseconds="750" />
                        </FormItem>
                        <FormItem Label="Description">
                            <TextArea @bind-Value="@context.Description" DebounceMilliseconds="750" />
                        </FormItem>
                        <FormItem Label="Repeat">
                            <Select @bind-Value="@context.RepeatValue"
                                    DefaultValue="@(HabitRepeatValue.Daily)"
                                    Style="width: 120px;"
                                    TItemValue="HabitRepeatValue"
                                    TItem="string">
                                <SelectOptions>
                                    <SelectOption TItemValue="HabitRepeatValue" TItem="string" Value="@(HabitRepeatValue.Never)" Label="Never" />
                                    <SelectOption TItemValue="HabitRepeatValue" TItem="string" Value="@(HabitRepeatValue.Daily)" Label="Daily" />
                                    <SelectOption TItemValue="HabitRepeatValue" TItem="string" Value="@(HabitRepeatValue.Weekly)" Label="Weekly" />
                                    <SelectOption TItemValue="HabitRepeatValue" TItem="string" Value="@(HabitRepeatValue.Monthly)" Label="Monthly" />
                                </SelectOptions>
                            </Select>
                        </FormItem>
                        <FormItem Label="Tomatoes">
                            <Rate @bind-Value="ntomatoes" Character="@TomatoCharacter" DefaultValue="3" />
                        </FormItem>


                    </Form>


                </Modal>
            </Title>
            <Dropzone Items="UserActivitiesKanbanShowing.Where(i => i.Status == ActivityStatus.Todo).ToList()" Accepts='(d, t) =>  d.HabitId != 0' TItem="HabitOccasion" OnItemDrop="@(async (item) => { item.Status = ActivityStatus.Todo; await habitTrackerservice.UpdateOccasionStatus(item, ActivityStatus.Todo);  UpdateColoumnFooter(); })">

                @if (context.HabitId != 0)
                {
                    <Card Bordered="true" Title=@context.Title Actions="@(new[] {
                actionEdit(async ()=> await OnClickEdit(context)),  actionDelete(async ()=> await  OnClickDelete(context))})">
                        <Body>
                            <p>@context.Description</p>
                        </Body>
                    </Card>
                }
                else
                {
                    <Card Bordered="true" Title=@context.Title>
                        <Body>
                            <p>@context.Description</p>
                        </Body>
                    </Card>
                }


            </Dropzone>
            </Col>
            <Col Span="8" Xs="24" Xl="8">
            <Title Level="3">Doing</Title>
            <Dropzone Items="UserActivitiesKanbanShowing.Where(i => i.Status == ActivityStatus.Doing).ToList()" Accepts='(d, t) =>  d.HabitId != 0' TItem="HabitOccasion" OnItemDrop="@(async (item) => { item.Status = ActivityStatus.Doing; await habitTrackerservice.UpdateOccasionStatus(item, ActivityStatus.Doing);  UpdateColoumnFooter(); await HandleNotification(); }  )">

                @if (context.HabitId != 0)
                {
                    <Card Bordered="true" Title=@context.Title Actions="@(new[] {
                actionEdit(async ()=> await OnClickEdit(context)), actionDelete(async ()=> await OnClickDelete(context))})">
                        <Body>
                            <p>@context.Description</p>
                        </Body>
                    </Card>
                }
                else
                {
                    <Card Bordered="true" Title=@context.Title>
                        <Body>
                            <p>@context.Description</p>
                        </Body>
                    </Card>
                }



            </Dropzone>
            </Col>
            <Col Span="8" Xs="24" Xl="8">
            <Title Level="3">Done</Title>
            <Dropzone Items="UserActivitiesKanbanShowing.Where(i => i.Status == ActivityStatus.Done).ToList()" Accepts='(d, t) => d.HabitId != 0' TItem="HabitOccasion" OnItemDrop="@(async (item) => { item.Status = ActivityStatus.Done; await habitTrackerservice.UpdateOccasionStatus(item, ActivityStatus.Done);   UpdateColoumnFooter(); await SendWellDoneNotification();
                                                                                                                                                                                      })">


                @if (context.HabitId != 0)
                {
                    <Card Bordered="true" Title=@context.Title Actions="@(new[] {
                actionEdit(async ()=> await OnClickEdit(context)),  actionDelete(async ()=> await OnClickDelete(context))})">
                        <Body>
                            <p>@context.Description</p>
                        </Body>
                    </Card>
                }
                else
                {
                    <Card Bordered="true" Title=@context.Title>
                        <Body>
                            <p>@context.Description</p>
                        </Body>
                    </Card>
                }


            </Dropzone>
            </Col>
        </Row>

    </div>
    </Col>
    <Col Span="6" Xs="24" Xl="6">
    <div class="site-calendar-demo-card">
        <Calendar DefaultValue="DateTime.Today" FullScreen="@false" />
    </div>
    </Col>
</Row>

@if (UserActivities.Count() == 0)
{
    <Progress Percent="0" Status="@ProgressStatus.Active" />

}
else
{
    <Progress StrokeColor=_gradients Percent="(Math.Floor(((double)UserActivities.Where(i => i.Status == ActivityStatus.Done).Count() / (double)UserActivities.Count() * 100)))  " Status="@ProgressStatus.Active" />

}





@code{
    #region Initzialize

    decimal ntomatoes;
    string username;
    [CascadingParameter(Name = "KanbanUserActivities")] List<HabitOccasion> UserActivitiesKanbanShowing { get; set; }
    [CascadingParameter(Name = "UserActivities")] List<HabitOccasion> UserActivities { get; set; }

    bool dataisloaded = false;
    private Habit habit = new Habit();
    DateTime startingdate;
    bool _edit = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        username = authState.User.Identity.Name;
        startingdate = DateTime.Today;
        UpdateUserActivities();
    }

    private void UpdateUserActivities()
    {
        UserActivities = habitTrackerservice.GetAllTodaysUserHabits(username);
        UserActivitiesKanbanShowing = new List<HabitOccasion>(UserActivities);
        UserActivitiesKanbanShowing.Add(new HabitOccasion() { HabitId = 0, Status = ActivityStatus.Todo, Description = UserActivities.Where(i => i.Status == ActivityStatus.Todo).Count() + "/" + UserActivities.Count() });
        UserActivitiesKanbanShowing.Add(new HabitOccasion() { HabitId = 0, Status = ActivityStatus.Doing, Description = UserActivities.Where(i => i.Status == ActivityStatus.Doing).Count() + "/" + UserActivities.Count() });
        UserActivitiesKanbanShowing.Add(new HabitOccasion() { HabitId = 0, Status = ActivityStatus.Done, Description = UserActivities.Where(i => i.Status == ActivityStatus.Done).Count() + "/" + UserActivities.Count() });
    }

    private void UpdateColoumnFooter()
    {
        UserActivitiesKanbanShowing.Where(i => i.HabitId == 0 && i.Status == ActivityStatus.Todo).FirstOrDefault().Description = UserActivities.Where(i => i.Status == ActivityStatus.Todo).Count() + "/" + UserActivities.Count();
        UserActivitiesKanbanShowing.Where(i => i.HabitId == 0 && i.Status == ActivityStatus.Doing).FirstOrDefault().Description = UserActivities.Where(i => i.Status == ActivityStatus.Doing).Count() + "/" + UserActivities.Count();
        UserActivitiesKanbanShowing.Where(i => i.HabitId == 0 && i.Status == ActivityStatus.Done).FirstOrDefault().Description = UserActivities.Where(i => i.Status == ActivityStatus.Done).Count() + "/" + UserActivities.Count();

    }
    #endregion
    #region Modal
    string title = "New Habit";
    bool _ModalVisible = false;

    AntDesign.Form<Habit> form;
    public void OnValidate()
    {
        form.Validate();
    }

    RenderFragment<RateItemRenderContext> TomatoCharacter = (builder) =>
    @<Template>
        O
    </Template>;

    private async Task ModalHandleOk(MouseEventArgs e)
    {

        habit.fkUserName = username;
        if (form.Validate())
        {
            habit.RequiredTomatoes = int.Parse(ntomatoes.ToString());
            if (_edit)
            {
                if (habitRepeatValueBeforeChanges == habit.RepeatValue)
                {
                    await habitTrackerservice.UpdateHabitAsync(habit);
                }
                else
                {
                    await habitTrackerservice.UpdateHabitOccasionsAsync(habit, startingdate);
                }

                UpdateUserActivities();
                habit = new Habit();
            }
            else
            {
                await habitTrackerservice.AddHabitAsync(habit, startingdate);
                UpdateUserActivities();
                habit = new Habit();
            }
            _ModalVisible = false;
            _edit = false;
            StateHasChanged();
        }
    }

    private void ModalHandleCancel(MouseEventArgs e)
    {
        _ModalVisible = false;

    }

    #endregion

    #region Card

    RenderFragment actionEdit(Action clickAction) =>@<Icon Type="edit" OnClick="@clickAction" />;
RenderFragment actionDelete(Action clickAction) =>@<Icon Type="delete" OnClick="@clickAction" />;
    private HabitRepeatValue habitRepeatValueBeforeChanges;

    private async Task OnClickEdit(HabitOccasion SelectedHabitOccasion)
    {
        habit = await habitTrackerservice.GetHabitAsync(SelectedHabitOccasion.HabitId);


        habitRepeatValueBeforeChanges = habit.RepeatValue;
        ntomatoes = habit.RequiredTomatoes;
        _ModalVisible = true;
        _edit = true;
        StateHasChanged();
    }



    private async Task OnClickDelete(HabitOccasion SelectedHabitOccasion)
    {

        var habitDelete = await habitTrackerservice.GetHabitAsync(SelectedHabitOccasion.HabitId);
        await habitTrackerservice.DeleteHabitAsync(habitDelete);
        UpdateUserActivities();

        StateHasChanged();

    }
    #endregion

    #region Notifications
    #region TimerNotification

    public Timer timer;

    private async Task HandleNotification()
    {
        int OrigTime = 1500;
        string key = $"open{DateTime.Now}";
        timer = new Timer(1000);
        timer.Enabled = true;
        timer.Start();
        timer.Elapsed += (sender, e) => MyElapsedMethod(sender, e, key, ref OrigTime, ref timer);

        await _notice.Open(new NotificationConfig()
        {
            Message = "Tomato Timer",
            Key = key,
            Duration = 0,
            Description = timerValue,
        });
    }

    public event Action MyFunction;
    string timerValue;
    void MyElapsedMethod(object sender, ElapsedEventArgs e, string key, ref int OrigTime, ref Timer mytimer)
    {
        if(OrigTime > 0)
        {
            OrigTime = OrigTime - 1;
            timerValue = OrigTime / 60 + ":" + ((OrigTime % 60) >= 10 ? (OrigTime % 60).ToString() : "0" + OrigTime % 60);
            _notice.Open(new NotificationConfig()
            {
                Message = "Tomato Timer",
                Key = key,
                Description = timerValue,
                Duration = 0
            }) ;
        }
        else
        {
            mytimer.Stop();
            mytimer.Dispose();
        }
    }

    #endregion
    #region WellDoneNotification
    RenderFragment customIconWellDone =@<Icon Type="smile" Theme="outline" Style="color:#108ee9;"></Icon>;


    private async Task SendWellDoneNotification()
    {
        await _notice.Open(new NotificationConfig()
        {
            Message = "Well done!",
            Description = "Keep it up!",
            Icon = customIconWellDone
        });
    }
    #endregion
    #endregion
    #region ProgressBar
    private Dictionary<string, string> _gradients = new()
    {
        { "0%", "#108ee9" },
        { "100%", "#87d068" }
    };
    #endregion

}
