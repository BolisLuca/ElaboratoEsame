@page "/"

@using Microsoft.AspNetCore.Components.Authorization
@using System.Text.Json
@inject HabitTrackerDbContext HabitTrackercontext
@inject AuthenticationStateProvider AuthenticationStateProvider


<Row>
    <Col Span="18">
    <div style="background-color: #ececec; padding: 20px;">
        <Row Gutter="16">

            <Col Span="8">
            <Title Level="3">
                To Do <Button Type="primary" OnClick="@(()=>{ _visible = true; })">
                    <Icon Type="plus" Theme="outline" />
                </Button>
                <Modal Title="@title"
                       Visible="@_visible"
                       OnOk="@HandleOk"
                       OnCancel="@HandleCancel">


                    <Form Model="@activity"
                          LabelColSpan="8"
                          WrapperColSpan="16"
                          OnFinish="OnFinish"
                          OnFinishFailed="OnFinishFailed"
                          Size="@AntSizeLDSType.Default">

                        <FormItem Label="Title">
                            <Input @bind-Value="@context.Title" />
                        </FormItem>
                        <FormItem Label="Description">
                            <TextArea @bind-Value="@context.Description" />
                        </FormItem>

                        <FormItem Label="Date">
                            <DatePicker @bind-Value="@context.Data" DefaultValue="DateTime.Today"  DefaultPickerValue="DateTime.Today" />
                        </FormItem>
                        <FormItem Label="Tomatoes">
                            <Rate Character="@Character1" DefaultValue="3" />
                        </FormItem>


                    </Form>


                </Modal>
            </Title>

            <Dropzone Items="UserActivities.Where(i => i.Status == Models.ActivityStatus.Todo).ToList()" Accepts='(d, t)=>!d.Pkid.Contains("no_drag")' TItem="Activity" OnItemDrop="@((item) => { item.Status = ActivityStatus.Todo;  HabitTrackercontext.SaveChanges(); UpdateUserActivities(); })">

                <Card Bordered="true" Title=@context.Title>
                    <Body>
                        <p>@context.Description</p>
                    </Body>
                </Card>

            </Dropzone>
            </Col>
            <Col Span="8">
            <Title Level="3">Doing</Title>
            <Dropzone Items="UserActivities.Where(i => i.Status == Models.ActivityStatus.Doing).ToList()" Accepts='(d, t)=>!d.Pkid.Contains("no_drag")' TItem="Activity" OnItemDrop="@((item) => { item.Status = ActivityStatus.Doing; HabitTrackercontext.SaveChanges();UpdateUserActivities();  })">


                <Card Bordered="true" Title=@context.Title>
                    <Body>
                        <p>@context.Description</p>
                    </Body>
                </Card>


            </Dropzone>
            </Col>
            <Col Span="8">
            <Title Level="3">Done</Title>
            <Dropzone Items="UserActivities.Where(i => i.Status == Models.ActivityStatus.Done).ToList()" Accepts='(d, t)=>!d.Pkid.Contains("no_drag")' TItem="Activity" OnItemDrop="@((item) => { item.Status = ActivityStatus.Done; HabitTrackercontext.SaveChanges();UpdateUserActivities();  })">


                <Card Bordered="true" Title=@context.Title>
                    <Body>
                        <p>@context.Description</p>
                    </Body>
                </Card>


            </Dropzone>
            </Col>
        </Row>

    </div>
    </Col>
    <Col Span="6">
    <div class="site-calendar-demo-card">
        <Calendar DefaultValue="DateTime.Today" FullScreen="@false" />
    </div>
    </Col>
</Row>
<Progress Percent="(Math.Floor(((double)HabitTrackercontext.Activities.Where(i=> i.Data == DateTime.Today).Where(i => i.fkUsernName == username).Where(i => i.Status == ActivityStatus.Done).Count()/ (double)HabitTrackercontext.Activities.Where(i=> i.Data == DateTime.Today).Where(i => i.fkUsernName == username).Count()*100)) )  " Status="@ProgressStatus.Active" />
<p> </p>
@code{
    string username;
    public List<Activity> UserActivities;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        username = authState.User.Identity.Name;
        UpdateUserActivities();
    }

    private void UpdateUserActivities()
    {
        UserActivities = HabitTrackercontext.Activities.Where(i=> i.Data == DateTime.Today).Where(i => i.fkUsernName == username).ToList();
        UserActivities.Add(new Activity() { Pkid = "no_drag1", Status = ActivityStatus.Todo, Description = HabitTrackercontext.Activities.Where(i => i.fkUsernName == username).Where(i => i.Data == DateTime.Today).Where(i => i.Status == ActivityStatus.Todo).Count() + "/" + HabitTrackercontext.Activities.Where(i => i.Data == DateTime.Today).Where(i => i.fkUsernName == username).Count() });
        UserActivities.Add(new Activity() { Pkid = "no_drag2", Status = ActivityStatus.Doing, Description = HabitTrackercontext.Activities.Where(i => i.fkUsernName == username).Where(i => i.Data == DateTime.Today).Where(i => i.Status == ActivityStatus.Doing).Count() + "/" + HabitTrackercontext.Activities.Where(i => i.Data == DateTime.Today).Where(i => i.fkUsernName == username).Count() });
        UserActivities.Add(new Activity() { Pkid = "no_drag3", Status = ActivityStatus.Done, Description = HabitTrackercontext.Activities.Where(i => i.fkUsernName == username).Where(i => i.Data == DateTime.Today).Where(i=>i.Status == ActivityStatus.Done).Count() + "/" + HabitTrackercontext.Activities.Where(i => i.Data == DateTime.Today).Where(i => i.fkUsernName == username).Count() });
    }
    string title = "New Activity";
    bool _visible = false;

    private async Task HandleOk(MouseEventArgs e)
    {
        Console.WriteLine(e);
        await HabitTrackercontext.Activities.AddAsync(new Activity() { Pkid= username+ HabitTrackercontext.Activities.Where(i => i.fkUsernName == username).Count(), Title= activity.Title, Description= activity.Description, Data= activity.Data, Tomato_richiesti = activity.Tomato_richiesti, Status = ActivityStatus.Todo ,fkUsernName = username });
        HabitTrackercontext.SaveChanges();
        UpdateUserActivities();
        _visible = false;
    }

    private void HandleCancel(MouseEventArgs e)
    {
        Console.WriteLine(e);
        _visible = false;
    }

    private Activity activity = new Activity();

    private void OnFinish(EditContext editContext)
    {

    }

    private void OnFinishFailed(EditContext editContext)
    {

    }

    RenderFragment<RateItemRenderContext> Character1 = (builder) =>
    @<Template>
        O
    </Template>;


}
