@page "/Calendar"
@inject HabitTrackerService habitTrackerservice
@inject AuthenticationStateProvider AuthenticationStateProvider

<br />
<Row>
    <Col Span="12" Offset="6">
    <Title Level="1">Don't Break The Chain!</Title>
    </Col>
</Row>
<Row>
    <Col Span="18" Offset="3">
    <Calendar DefaultValue="DateTime.Today" DateCellRender="DateCellRender" Value="@value" OnSelect="OnSelect" OnPanelChange="OnPanelChange" />
    </Col>
</Row> <Modal Title="@title"
       Visible="@_ModalVisible"
       OnOk="@ModalHandleOk"
       OnCancel="@ModalHandleCancel">


    <Form Model="@habit"
          LabelColSpan="8"
          WrapperColSpan="16"
          Size="@AntSizeLDSType.Default">

        <FormItem Label="Title">
            <Input @bind-Value="@context.Title" />
        </FormItem>
        <FormItem Label="Description">
            <TextArea @bind-Value="@context.Description" />
        </FormItem>
        <FormItem Label="Repeat">
            <Select @bind-Value="@context.RepeatValue"
                    DefaultValue="@(HabitRepeatValue.Daily)"
                    Style="width: 120px;"
                    TItemValue="HabitRepeatValue"
                    TItem="string">
                <SelectOptions>
                    <SelectOption TItemValue="HabitRepeatValue" TItem="string" Value="@(HabitRepeatValue.Never)" Label="Never" />
                    <SelectOption TItemValue="HabitRepeatValue" TItem="string" Value="@(HabitRepeatValue.Daily)" Label="Daily" />
                    <SelectOption TItemValue="HabitRepeatValue" TItem="string" Value="@(HabitRepeatValue.Weekly)" Label="Weekly" />
                    <SelectOption TItemValue="HabitRepeatValue" TItem="string" Value="@(HabitRepeatValue.Monthly)" Label="Monthly" />
                </SelectOptions>
            </Select>
        </FormItem>
        <FormItem Label="Tomatoes">
            <Rate @bind-Value="ntomatoes" Character="@TomatoCharacter" DefaultValue="3" />
        </FormItem>


    </Form>


</Modal>
@code
{
    string username;
    private List<HabitOccasion> UserActivities { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        username = authState.User.Identity.Name;
        UserActivities = habitTrackerservice.GetAllUserOccasions(username);
    }

    private RenderFragment DateCellRender(DateTime value)
    {
        var DailyActivities = UserActivities.Where(i => i.ScheduledDate == value).ToList();

        return@<Template>
                   <ul class="events">
                       @foreach (var activity in DailyActivities)
                       {
                           if (activity.ScheduledDate <= DateTime.Today)
                           {
                               <li key="@activity.HabitId">
                                   @if (activity.Status == ActivityStatus.Done)
                                   {<Icon Type="check" Theme="outline" Style="color:green" />}
                                   else
                                   { <Icon Type="close" Theme="outline" Style="color:red" />}<Badge Text="@activity.Title" />
                               </li>
                    }
                    else
                    {
                   <li key="@activity.HabitId">
                       <Badge Text="@activity.Title" />
                   </li>
                    }

                       }
                   </ul>
    </Template>;
    }


    private DateTime value = DateTime.Today;
    string title = "New Habit";
    bool _ModalVisible = false;
    decimal ntomatoes;

    private void OnSelect(DateTime value)
    {
        _ModalVisible = true;
        startingdate = value;
        StateHasChanged();
    }
    DateTime startingdate;


    private void OnPanelChange(DateTime value, string mode)
    {
        this.value = value;
    }

    private async Task ModalHandleOk(MouseEventArgs e)
    {
        habit.RequiredTomatoes = int.Parse(ntomatoes.ToString());
        habit.fkUserName = username;
        await habitTrackerservice.AddHabitAsync(habit, startingdate);
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        username = authState.User.Identity.Name;
        UserActivities = habitTrackerservice.GetAllUserOccasions(username);
        habit = new Habit();

        _ModalVisible = false;
        StateHasChanged();
    }

    private void ModalHandleCancel(MouseEventArgs e)
    {
        _ModalVisible = false;

    }


    private Habit habit = new Habit();

    private void OnFinish(EditContext editContext)
    {

    }

    private void OnFinishFailed(EditContext editContext)
    {

    }

    RenderFragment<RateItemRenderContext> TomatoCharacter = (builder) =>
@<Template>
    O
</Template>;


}