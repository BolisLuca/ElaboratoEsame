@page "/Report"
@inject HabitTrackerService habitTrackerservice
@inject AuthenticationStateProvider AuthenticationStateProvider
@using AntDesign.Charts
@using Title = AntDesign.Charts.Title

<h3>Report</h3>
<Tabs>
    <TabPane Key="1">
        <Tab>My Habits</Tab>
        <ChildContent>
            <Rose Data="dataRose" Config="configRose" />
        </ChildContent>
    </TabPane>

    <TabPane Key="2">
        <Tab>Day by Day</Tab>
        <ChildContent>
            <AntDesign.Charts.Line Data="dataDaybyDay" Config="configDaybyDay" />
        </ChildContent>
    </TabPane>

    <TabPane Key="3">
        <Tab>Monthly</Tab>
        <ChildContent>
            <AntDesign.Charts.Column Data="dataColumn" Config="configColumn" />
        </ChildContent>
    </TabPane>
</Tabs>

@code{
    string username;
    List<Habit> habits;
    List<HabitOccasion> AllHabitOccasions;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        username = authState.User.Identity.Name;
        habits = await habitTrackerservice.GetAllUserHabits(username);
        AllHabitOccasions = habitTrackerservice.GetAllUserOccasions(username);
        dataRose = new List<object>();
        int i = 0;
        foreach (var habit in habits)
        {
            if(habit.RepeatValue != HabitRepeatValue.Never)
            {
                if(habit.RepeatValue == HabitRepeatValue.Weekly)
                {
                    var obj = new { type = habit.Title, value = AllHabitOccasions.Where(i => i.HabitId == habit.HabitId).Count() *4 };
                    dataRose.Add(obj);

                }
                else
                {
                    var obj = new { type = habit.Title, value = AllHabitOccasions.Where(i => i.HabitId == habit.HabitId).Count() };
                    dataRose.Add(obj);

                }

            }

        }

        dataDaybyDay = new List<object>();
        AllHabitOccasions.OrderBy(i => i.ScheduledDate);
        var firstday = AllHabitOccasions.Min(i => i.ScheduledDate);
        while (firstday < DateTime.Today)
        {
            var objEx = new { date = firstday.ToShortDateString(), type = "Expected", value = AllHabitOccasions.Where(i => i.ScheduledDate == firstday).Count() };
            var obj = new { date = firstday.ToShortDateString(), type = "Completed", value = AllHabitOccasions.Where(i => i.ScheduledDate == firstday).Where(i=> i.Status == ActivityStatus.Done).Count() };
            dataDaybyDay.Add(obj);
            dataDaybyDay.Add(objEx);
            firstday = firstday.AddDays(1);
        }
        dataColumn = new List<object>();
        firstday = AllHabitOccasions.Min(i => i.ScheduledDate);
        while (firstday.Month < DateTime.Today.Month)
        {
            var obj = new { type = firstday.Month.ToString() , value = AllHabitOccasions.Where(i => i.ScheduledDate.Month == firstday.Month).Where(i => i.Status == ActivityStatus.Done).Count() };
            dataColumn.Add(obj);
            firstday = firstday.AddMonths(1);
        }
    }


    #region Rose
    List<object> dataRose;
    List<object> dataColumn;


    readonly RoseConfig configRose = new RoseConfig
    {
        ForceFit = true,
        Title = new Title
        {
            Visible = true,
            Text = "Habits"
        },
        Description = new Description
        {
            Visible = true,
            Text =
                "Those are all your habits"
        },
        Radius = 0.8,
        RadiusField = "value",
        CategoryField = "type",
        ColorField = "type",
        Label = new RoseLabel
        {
            Visible = true,
            Type = "outer"
            @*content= (text) => text.value,*@
        }
    };

    #endregion Rose
    List<object> dataDaybyDay;

 

    readonly ColumnLineConfig config2 = new ColumnLineConfig
    {
        Title = new Title
        {
            Visible = true,
            Text = "柱线混合图"
        },
        Description = new Description
        {
            Visible = true,
            Text = "自定义图形细节"
        },
        XField = "time",
        YField = new[] { "value", "count" },
        ColumnConfig = new ColumnConfig
        {
            Color = "#586bce"
        },
        LineConfig = new LineConfig
        {
            Color  = "#29cae4",
            Point = new LineViewConfigPoint
            {
                Visible = true,
            },
            Label = new Label
            {
                Visible = true,
            }
        }

    };

    LineConfig configDaybyDay = new LineConfig
    {
        Title = new Title
        {
            Visible = true,
            Text = "Day by Day Analysis"
        },
        Description = new Description
        {
            Visible = true,
            Text = "You are watching the number of activities you completed every day"
        },
        Padding = "auto",
        ForceFit = true,
        XField = "date",
        YField = "value",
        YAxis = new ValueAxis
        {
            Label = new BaseAxisLabel()
        },
        Legend = new Legend
        {
            Position = "right-top"
        },
        SeriesField = "type"
        @*responsive = true,*@
    };
    ColumnConfig configColumn = new ColumnConfig
    {
        Title = new Title
        {
            Visible = true,
            Text = "Month - Activities "
        },
        Description = new Description
        {
            Visible = true,
            Text = "You are watching the number of activities that you completed each month.",
        },
        ForceFit = true,
        Padding = "auto",
        XField = "type",
        YField = "sales",
        Meta = new
        {
            Type = new
            {
                Alias = "Months"
            },
            Sales = new
            {
                Alias = "Activities"
            }
        },
        Label = new ColumnViewConfigLabel
        {
            Visible = true,
            Style = new TextStyle
            {
                FontSize = 12,
                FontWeight = 600,
                Opacity = 0.6,
            }

        }
    };
}